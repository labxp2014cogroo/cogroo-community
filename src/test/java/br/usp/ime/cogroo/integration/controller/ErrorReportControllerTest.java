package br.usp.ime.cogroo.integration.controller;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.fail;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.net.URLEncoder;
import java.security.InvalidKeyException;
import java.security.KeyPair;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.persistence.EntityManager;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import utils.HSQLDBEntityManagerFactory;
import utils.RestUtil;
import br.usp.ime.cogroo.dao.UserDAO;
import br.usp.ime.cogroo.logic.SecurityUtil;
import br.usp.ime.cogroo.model.User;

public class ErrorReportControllerTest {

	private static final String ROOT = "http://localhost:8080";
	private EntityManager em;
	private UserDAO userDAO;
	private SecurityUtil security;

	@Test
	public void testGetAuthTokenProtocol() throws IOException,
			InvalidKeyException {
		RestUtil rest = new RestUtil();

		// cogroo side
		Map<String, String> data = new HashMap<String, String>();
		KeyPair kp = security.genKeyPair();
		byte[] key = kp.getPublic().getEncoded();
		data.put("user", "dummy");
		data.put("pubKey", security.encodeURLSafe(key)); // data to send, we
															// encode the bytes

		// send and get data, that should be the secret key generated by web
		// side
		Map<String, String> respData = rest.post(ROOT, "saveClientSecurityKey",
				data);

		String encodedEncryptedBKey = respData.get("encryptedSecretKey");
		// we can decrypt the key using the user key
		byte[] encryptedBKey = security.decodeURLSafe(encodedEncryptedBKey);

		// this key can be used now. Cogroo send the username/password to the
		// web
		data.clear();
		data.put("username", "dummy");
		data.put("encryptedPassword", security.encodeURLSafe(security.encrypt(
				kp.getPrivate(), encryptedBKey, "pAsSwD-123")));

		respData = rest.post(ROOT, "generateAuthenticationForUser", data);

		String encryptedToken = respData.get("token");
		byte[] tokenBytes = security.decrypt(kp.getPrivate(), encryptedBKey,
				security.decodeURLSafe(encryptedToken));

		String token = new String(tokenBytes);
		// we save this token.....
		assertEquals(16, token.length());
	}

	@Test
	public void testSendError() throws IOException, InvalidKeyException {
		RestUtil rest = new RestUtil();

		// cogroo side
		Map<String, String> data = new HashMap<String, String>();

		KeyPair kp = security.genKeyPair();
		byte[] key = kp.getPublic().getEncoded();
		data.put("user", "dummy");
		data.put("pubKey", security.encodeURLSafe(key)); // data to send, we
															// encode the bytes

		// send and get data, that should be the secret key generated by web
		// side
		Map<String, String> respData = rest.post(ROOT, "saveClientSecurityKey",
				data);

		String encodedEncryptedBKey = respData.get("encryptedSecretKey");
		// we can decrypt the key using the user key
		byte[] encryptedBKey = security.decodeURLSafe(encodedEncryptedBKey);

		// this key can be used now. Cogroo send the username/token and data to
		// the web
		data.clear();
		data.put("username", "dummy");
		data.put("token", security.encodeURLSafe(security.encrypt(
				kp.getPrivate(), encryptedBKey, "3fdff0a15a967d6a")));
		data.put("error", URLEncoder.encode(getSampleError(), "UTF-8"));
		respData = rest.post(ROOT, "submitErrorReport", data);

		assertEquals("OK", respData.get("result"));

	}

	@Test
	public void testGetCategoriesForUser() throws IOException,
			InvalidKeyException {
		RestUtil rest = new RestUtil();

		// cogroo side
		Map<String, String> data = new HashMap<String, String>();

		KeyPair kp = security.genKeyPair();
		byte[] key = kp.getPublic().getEncoded();
		data.put("user", "dummy");
		data.put("pubKey", security.encodeURLSafe(key)); // data to send, we
															// encode the bytes

		// send and get data, that should be the secret key generated by web
		// side
		Map<String, String> respData = rest.post(ROOT, "saveClientSecurityKey",
				data);

		String encodedEncryptedBKey = respData.get("encryptedSecretKey");
		// we can decrypt the key using the user key
		byte[] encryptedBKey = security.decodeURLSafe(encodedEncryptedBKey);

		// this key can be used now. Cogroo send the username/token and data to
		// the web
		data.clear();
		data.put("username", "dummy");
		data.put("token", security.encodeURLSafe(security.encrypt(
				kp.getPrivate(), encryptedBKey, "3fdff0a15a967d6a")));
		respData = rest.post(ROOT, "getErrorCategoriesForUser", data);
		String cat = respData.get("categories");
		assertNotNull(cat);
	}

	private static final Pattern imgSrc = Pattern
			.compile("<img\\s+id=\"gaMobileTrackingCode\"\\s+src=\"([^\"]+)\".*");

	@Test
	public void testGetImageForAnalytics() throws IOException,
			InvalidKeyException {

		System.out.println(System.getProperty("java.version"));
		System.out.println(System.getProperty("java.vendor"));

		System.out.println(System.getProperty("os.name"));
		System.out.println(System.getProperty("os.arch"));
		System.out.println(System.getProperty("os.version"));

		StringBuilder sb = new StringBuilder();
		sb.append("CoGrOO/" + "3.0.7" + " ");
		sb.append("Java/" + System.getProperty("java.version") + " ("
				+ System.getProperty("java.vendor") + ") ");
		sb.append(System.getProperty("os.name") + "/"
				+ System.getProperty("os.version") + " ("
				+ System.getProperty("os.arch") + ") ");

		RestUtil rest = new RestUtil();
		String resp = rest.get("http://whatsmyuseragent.com/", "");
		// String resp =
		// "<img id=\"gaMobileTrackingCode\" src=\"ga.jspf?utmac=MO-18985930-1&utmn=1453012713&utmr=-&utmp=%2FsubmitErrorReport&guid=ON\" /> ";

		// get the img URL

		System.out.println(resp);
		Matcher m = imgSrc.matcher(resp);
		if (m.find()) {
			String respImg = rest.get(ROOT, m.group(1));
		} else {
			fail();
		}

		assertNotNull(resp);
	}

	private String getSampleError() throws IOException {
		File f = new File(getClass().getResource("sampleError.xml").getFile());
		BufferedReader reader = new BufferedReader(new FileReader(f));
		StringBuilder sb = new StringBuilder();
		String line = reader.readLine();
		while (line != null) {
			sb.append(line + "\n");
			line = reader.readLine();
		}
		return sb.toString();
	}

	@Before
	public void setup() {
		em = HSQLDBEntityManagerFactory.createEntityManager();

		this.userDAO = new UserDAO(em);
		em.getTransaction().begin();
		userDAO.add(new User("dummy"));
		em.getTransaction().commit();

		this.security = new SecurityUtil();
	}

	@After
	public void tearDown() {
		em.close();
	}
}
